# -*- coding: utf-8 -*-
"""CovidDetector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OgJ-43jsZEOSAeiW_ESt-nYPhnoA157p

**DETECTION** **OF** **COVID**-**19** ***AT*** **EARLY** **STAGES** **USING** **DEEP** **LEARNING** **APPROACH** **ON** **LUNG** X-**RAY** **IMAGES**

---

**COLLECTING** **DATASET**
"""

!wget http://cb.lk/covid_19

!unzip covid_19

"""**IMPORTING NECESSARY LIBRARIES** //2

"""

import keras
from keras.models import Sequential
from keras.layers import *
from keras.regularizers import l2
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ModelCheckpoint
import matplotlib.pyplot as plt
import numpy as np

"""**INITIALISING CNN MODEL** //3"""

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(224,224,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3),activation='relu',kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(128,(3,3),activation='relu',kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(256,activation='relu',kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))

model.add(Dense(1,activation='sigmoid'))

model.compile(loss=keras.losses.binary_crossentropy,optimizer='adam',metrics=['accuracy'])

"""**PLOTTING MODEL SUMMARY**"""

from keras.utils.vis_utils import plot_model
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

"""**DATA** **GENERATION**"""

my_generator = ImageDataGenerator()

train_data = my_generator.flow_from_directory(
    'CovidDataset/Train',
    target_size = (224,224),
    batch_size = 15,
    class_mode = 'binary'
)


val_data = my_generator.flow_from_directory(
    'CovidDataset/Val',
    target_size = (224,224),
    batch_size = 15,
    class_mode = 'binary'
)

"""**MODELCHECKPOINT**"""

checkpointer = ModelCheckpoint(filepath="best_weights.cd",
                               monitor = 'val_accuracy',
                               verbose=1,
                               save_best_only=True)

"""**TRAINING THE MODEL**"""

cd_cnn = model.fit_generator(train_data,
                                   steps_per_epoch = 5,
                                   epochs = 10,
                                   callbacks=[checkpointer],
                                   validation_data=val_data,
                                   validation_steps = 4)

"""**LOADING THE BEST WEIGHTS**"""

model.load_weights('best_weights.cd')

"""**SAVING THE MODEL**"""

model.save('cnn.cd')